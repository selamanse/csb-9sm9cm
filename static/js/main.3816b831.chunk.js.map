{"version":3,"sources":["HookForm.js","DemoData.js","index.js"],"names":["HookForm","useForm","handleSubmit","register","formState","errors","isSubmitting","useState","avro","setAvro","xml","setXml","xsd","setXsd","setNamespace","useClipboard","hasCopied","onCopy","id","onSubmit","values","console","log","Promise","resolve","axios","post","validateStatus","then","res","avroString","JSON","stringify","data","isInvalid","name","htmlFor","value","placeholder","required","minLength","message","min","defaultValue","onChange","event","target","namespace","mt","colorScheme","isLoading","type","hidden","onClick","preventDefault","fontSize","mb","size","isReadOnly","ml","App","p","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8TAqBe,SAASA,IACtB,MAIIC,cAHFC,EAAY,EAAZA,aACAC,EAAQ,EAARA,SAAS,EAAD,EACRC,UAAaC,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAIvB,EAAwBC,qBAAU,mBAA3BC,EAAI,KAAEC,EAAO,KACpB,EAAsBF,qBAAU,mBAAzBG,EAAG,KAAEC,EAAM,KAClB,EAAsBJ,qBAAU,mBAAzBK,EAAG,KAAEC,EAAM,KAClB,EAAkCN,qBAAU,mBAA1BO,GAAF,KAAc,MAE9B,EAA8BC,YAAaP,GAAnCQ,EAAS,EAATA,UAAWC,EAAM,EAANA,OA2BnB,OACE,eAAC,IAAG,WACF,uBAAMC,GAAG,WAAWC,SAAUjB,GA3BlC,SAAkBkB,GAEhB,OADAC,QAAQC,IAAIF,GACL,IAAIG,SAAQ,SAACC,GAClBC,IACGC,KAAK,GAAD,OAZI,oDAYM,gBAAgBN,EAAQ,CACrCO,eAAgB,kBAAM,CAAI,IAE3BC,MAAK,SAACC,GACL,IAAMC,EAAaC,KAAKC,UAAUH,EAAII,KAAM,KAAM,GAElDxB,EAAQqB,GACRN,GACF,GACJ,GACF,IAayD,UACnD,eAAC,IAAW,CAACU,UAAW7B,EAAO8B,KAAK,UAClC,cAAC,IAAS,CAACC,QAAQ,MAAK,iBACxB,cAAC,IAAQ,aACPlB,GAAG,MACHmB,MAAOzB,EACP0B,YAAY,0BACRnC,EAAS,MAAO,CAClBoC,SAAU,mBACVC,UAAW,CAAEH,MAAO,GAAII,QAAS,kCAGpCpC,EAAOO,KAAOP,EAAOO,IAAI6B,QAC1B,cAAC,IAAS,CAACL,QAAQ,MAAK,iBACxB,cAAC,IAAQ,aACPM,IAAI,KACJL,MAAO3B,EACPQ,GAAG,MACHoB,YAAY,qDACRnC,EAAS,MAAO,CAClBoC,SAAU,mBACVC,UAAW,CAAEH,MAAO,EAAGI,QAAS,kCAGnCpC,EAAOK,KAAOL,EAAOK,IAAI+B,QAC1B,cAAC,IAAS,CAACL,QAAQ,YAAW,uBAC9B,cAAC,IAAK,aACJlB,GAAG,YACHyB,aAAa,qBACbC,SAjCoB,SAACC,GAAK,OAAK/B,EAAa+B,EAAMC,OAAOT,MAAO,EAkChEC,YAAY,2BACRnC,EAAS,YAAa,CACxBoC,SAAU,4BACVC,UAAW,CAAEH,MAAO,EAAGI,QAAS,kCAGnCpC,EAAO0C,WAAa1C,EAAO0C,UAAUN,WAExC,cAAC,IAAM,CACLO,GAAI,EACJC,YAAY,QACZC,UAAW5C,EACX6C,KAAK,SAAQ,oBAGN,WAET,cAAC,IAAM,CAACC,OAAO,OAAOJ,GAAI,EAAGC,YAAY,QAAQI,QA1DnC,SAACR,GACnBA,EAAMS,iBAEN3C,ECvDiB,iwBDwDjBE,EC9BiB,68CD+BnB,EAqD4E,qBAIxE,uBACA,cAAC,IAAI,CAAC0C,SAAS,KAAI,kBACnB,eAAC,IAAI,CAACC,GAAI,EAAE,UACV,cAAC,IAAQ,CACPlB,YAAY,6DACZmB,KAAK,KACLC,YAAU,EACVrB,MAAO7B,IAET,cAAC,IAAM,CAAC6C,QAASpC,EAAQ0C,GAAI,EAAE,SAC5B3C,EAAY,SAAW,cAKlC,C,sCEzHA,SAAS4C,IACP,OACE,eAAC,IAAc,WACb,cAAC,IAAQ,IACT,eAAC,IAAG,CAACC,EAAG,EAAE,UACR,cAAC,IAAO,mCACR,uBACA,cAAC7D,EAAQ,SAIjB,CAEA,IAAM8D,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAACN,EAAG,IAAKE,E","file":"static/js/main.3816b831.chunk.js","sourcesContent":["// author: Abhishek Kumar Singh - https://abheist.com/\n\nimport { useForm } from \"react-hook-form\";\nimport {\n  Input,\n  Textarea,\n  Text,\n  Box,\n  useClipboard,\n  Flex\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Button\n} from \"@chakra-ui/react\";\nimport { xsdValue, xmlValue } from \"./DemoData\";\n\nexport default function HookForm() {\n  const {\n    handleSubmit,\n    register,\n    formState: { errors, isSubmitting }\n  } = useForm();\n\n  const apiUrl = \"https://xsd2avro-hw5f5hdopa-ey.a.run.app/xsd2avro\";\n  const [avro, setAvro] = useState();\n  const [xml, setXml] = useState();\n  const [xsd, setXsd] = useState();\n  const [namespace, setNamespace] = useState();\n\n  const { hasCopied, onCopy } = useClipboard(avro);\n\n  function onSubmit(values) {\n    console.log(values);\n    return new Promise((resolve) => {\n      axios\n        .post(`${apiUrl}/connect/xsd`, values, {\n          validateStatus: () => true\n        })\n        .then((res) => {\n          const avroString = JSON.stringify(res.data, null, 2);\n          //console.log(avroString);\n          setAvro(avroString);\n          resolve();\n        });\n    });\n  }\n\n  const handleClick = (event) => {\n    event.preventDefault();\n\n    setXml(xmlValue);\n    setXsd(xsdValue);\n  };\n\n  const handleNamespaceChange = (event) => setNamespace(event.target.value);\n\n  return (\n    <Box>\n      <form id=\"avroForm\" onSubmit={handleSubmit(onSubmit)}>\n        <FormControl isInvalid={errors.name}>\n          <FormLabel htmlFor=\"xsd\">XSD</FormLabel>\n          <Textarea\n            id=\"xsd\"\n            value={xsd}\n            placeholder=\"paste xsd content here\"\n            {...register(\"xsd\", {\n              required: \"This is required\",\n              minLength: { value: 20, message: \"Minimum length should be 4\" }\n            })}\n          />\n          {errors.xsd && errors.xsd.message}\n          <FormLabel htmlFor=\"xml\">XML</FormLabel>\n          <Textarea\n            min=\"12\"\n            value={xml}\n            id=\"xml\"\n            placeholder=\"paste xml with example data according to xsd here\"\n            {...register(\"xml\", {\n              required: \"This is required\",\n              minLength: { value: 4, message: \"Minimum length should be 4\" }\n            })}\n          />\n          {errors.xml && errors.xml.message}\n          <FormLabel htmlFor=\"namespace\">Namespace</FormLabel>\n          <Input\n            id=\"namespace\"\n            defaultValue=\"de.deepshore.kafka\"\n            onChange={handleNamespaceChange}\n            placeholder=\"Namespace for your avro\"\n            {...register(\"namespace\", {\n              required: \"please define a namespace\",\n              minLength: { value: 4, message: \"Minimum length should be 4\" }\n            })}\n          />\n          {errors.namespace && errors.namespace.message}\n        </FormControl>\n        <Button\n          mt={4}\n          colorScheme=\"green\"\n          isLoading={isSubmitting}\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n        &nbsp;&nbsp;\n        <Button hidden=\"true\" mt={4} colorScheme=\"green\" onClick={handleClick}>\n          Demo\n        </Button>\n      </form>\n      <br />\n      <Text fontSize=\"lg\">Avro</Text>\n      <Flex mb={2}>\n        <Textarea\n          placeholder=\"Your avro schema will be shown here after pressing submit.\"\n          size=\"sm\"\n          isReadOnly\n          value={avro}\n        ></Textarea>\n        <Button onClick={onCopy} ml={2}>\n          {hasCopied ? \"Copied\" : \"Copy\"}\n        </Button>\n      </Flex>\n    </Box>\n  );\n}\n","export const xmlValue = `<?xml version=\"1.0\"?>\n<x:books xmlns:x=\"urn:books\">\n    <book id=\"bk001\">\n        <test_boolean>true</test_boolean>\n        <author>Writer</author>\n        <title>The First Book</title>\n        <genre>Fiction</genre>\n        <price>44.95</price>\n        <pub_date>2000-10-01</pub_date>\n        <review>An amazing story of nothing.</review>\n    </book>\n\n    <book id=\"bk002\">\n        <test_boolean>true</test_boolean>\n        <author>Poet</author>\n        <title>The Poet's First Poem</title>\n        <genre>Poem</genre>\n        <price>24.95</price>\n        <pub_date>2000-10-01</pub_date>\n        <review>Least poetic poems.</review>\n        <review>...meh</review>\n        <note>2</note>\n        <score>23.12</score>\n    </book>\n</x:books>`;\n\nexport const xsdValue = `<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n            targetNamespace=\"urn:books\"\n            xmlns:bks=\"urn:books\">\n\n    <xsd:element name=\"books\" type=\"bks:BooksForm\"/>\n\n    <xsd:complexType name=\"BooksForm\">\n        <xsd:sequence>\n            <xsd:element name=\"book\"\n                         type=\"bks:BookForm\"\n                         minOccurs=\"0\"\n                         maxOccurs=\"unbounded\"/>\n        </xsd:sequence>\n    </xsd:complexType>\n\n    <xsd:complexType name=\"BookForm\">\n        <xsd:sequence>\n            <xsd:element name=\"test_boolean\" type=\"xsd:boolean\"/>\n            <xsd:element name=\"author\" type=\"xsd:string\"/>\n            <xsd:element name=\"title\" type=\"xsd:string\"/>\n            <xsd:element name=\"genre\" type=\"xsd:string\"/>\n            <xsd:element name=\"price\" type=\"xsd:float\"/>\n            <xsd:element name=\"pub_date\" type=\"xsd:date\"/>\n            <xsd:element name=\"review\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n            <xsd:element name=\"note\" type=\"xsd:int\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n            <xsd:element name=\"score\" type=\"bks:score\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </xsd:sequence>\n        <xsd:attribute name=\"id\" type=\"xsd:string\"/>\n    </xsd:complexType>\n    \n    <xsd:simpleType name=\"score\">\n      <xsd:restriction base=\"xsd:decimal\">\n        <xsd:fractionDigits value=\"2\"/>\n      </xsd:restriction>\n    </xsd:simpleType>\n\n</xsd:schema>`;\n","// author: Abhishek Kumar Singh - https://abheist.com/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport HookForm from \"./HookForm\";\nimport { ChakraProvider, CSSReset, Box, Heading } from \"@chakra-ui/react\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <CSSReset />\n      <Box p={4}>\n        <Heading>XSD 2 Avro Converter</Heading>\n        <br />\n        <HookForm />\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}